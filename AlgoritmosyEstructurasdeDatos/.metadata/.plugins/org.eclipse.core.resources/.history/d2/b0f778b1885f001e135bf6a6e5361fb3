package aed.polinomios;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiFunction;

import es.upm.aedlib.Position;
import es.upm.aedlib.positionlist.*;


/**
 * Operaciones sobre polinomios de una variable con coeficientes enteros.
 */
public class Polinomio {

  // Una lista de monomios
  PositionList<Monomio> terms;

  /**
   * Crea el polinomio "0".
   */
  public Polinomio() {
    terms = new NodePositionList<>();
  }

  /**
   * Crea un polinomio definado por una lista con monomios.
   * @param terms una lista de monomios
   */
  public Polinomio(PositionList<Monomio> terms) {
    this.terms = terms;
  }

  /**
   * Crea un polinomio definado por un String.
   * La representaci√≥n del polinomio es una secuencia de monomios separados
   * por '+' (y posiblemente con caracteres blancos).
   * Un monomio esta compuesto por tres partes,
   * el coefficiente (un entero), el caracter 'x' (el variable), y el exponente
   * compuesto por un un caracter '^' seguido por un entero.
   * Se puede omitir multiples partes de un monomio, 
   * ejemplos:
   * <pre>
   * {@code
   * new Polinomio("2x^3 + 9");
   * new Polinomio("2x^3 + -9");
   * new Polinomio("x");   // == 1x^1
   * new Polinomio("5");   // == 5x^0
   * new Polinomio("8x");  // == 8x^1
   * new Polinomio("0");   // == 0x^0
   * }
   * </pre>
   * @throws IllegalArgumentException si el argumento es malformado
   * @param polinomio - una secuencia de monomios separados por '+'
   */
  public Polinomio(String polinomio) {
	    terms = new NodePositionList<>();
	    if (polinomio.equals("0") ? false : true) {
	        String[] elementos = polinomio.split("\\s*\\+\\s*");
	        for (String monomioStr : elementos) {
	            int coeficiente;
	            int exponente;

	            if (monomioStr.contains("x^")) {
	                String[] partes = monomioStr.split("x\\^");
	                coeficiente = Integer.parseInt(partes[0].trim());
	                exponente = Integer.parseInt(partes[1].trim());
	            } else if (monomioStr.contains("x")) {
	                coeficiente = Integer.parseInt(monomioStr.replace("x", "").trim());
	                exponente = 1;
	            } else {
	                coeficiente = Integer.parseInt(monomioStr.trim());
	                exponente = 0;
	            }

	            terms.addLast(new Monomio(coeficiente, exponente));
	        }
	    }
	}


  /**
   * Suma dos polinomios.
   * @param p1 primer polinomio.
   * @param p2 segundo polinomio.
   * @return la suma de los polinomios.
   */
  public static Polinomio suma(Polinomio p1, Polinomio p2) {
	  Position<Monomio> cursor1 = p1.terms.first(); 
	  Position<Monomio> cursor2 = p2.terms.first(); 
	  Polinomio sumaFinal = new Polinomio();
	  
	  while(cursor1!=null && cursor2!=null ) {
		  
		  Monomio monomio1= cursor1.element();
		  Monomio monomio2= cursor2.element();
		  
		  int exponente1= monomio1.getExponente();
		  int exponente2= monomio2.getExponente();
		  int coeficiente1= monomio1.getCoeficiente();
		  int coeficiente2= monomio2.getCoeficiente();
		  
		  if(exponente1>exponente2) {
			  sumaFinal.terms.addLast(new Monomio(coeficiente1, exponente1));
			  cursor1= p1.terms.next(cursor1);
		  }else if(exponente1<exponente2) {
			  sumaFinal.terms.addLast(new Monomio(coeficiente2, exponente2));
			  cursor2= p2.terms.next(cursor2);
		  }else {
			  int nuevoCoeficiente = coeficiente1 + coeficiente2;
			  if(nuevoCoeficiente != 0) {
				  sumaFinal.terms.addLast(new Monomio(nuevoCoeficiente, exponente1 ));
			  }
			  cursor1= p1.terms.next(cursor1);
			  cursor2= p2.terms.next(cursor2);
 		  }	
	  }	
	  while(cursor1!=null) {
		  Monomio monomio1 = cursor1.element();
		  sumaFinal.terms.addLast(new Monomio(monomio1.getCoeficiente(), monomio1.getExponente()));
		  cursor1= p1.terms.next(cursor1);
		  
	  }
	  while(cursor2!=null) {
		  Monomio monomio2 = cursor2.element();
		  sumaFinal.terms.addLast(new Monomio(monomio2.getCoeficiente(), monomio2.getExponente()));
		  cursor2= p2.terms.next(cursor2);
		  
	  }  
    return sumaFinal;
  }
    
  /**
   * Substraccion de dos polinomios.
   * @param p1 primer polinomio.
   * @param p2 segundo polinomio.
   * @return la resta de los polinomios.
   */
  public static Polinomio resta(Polinomio p1, Polinomio p2) {
	    Polinomio resultado = new Polinomio();

	    Position<Monomio> cursor1 = p1.terms.first();
	    Position<Monomio> cursor2 = p2.terms.first();

	    while (cursor1 != null && cursor2 != null) {
	        Monomio monomio1 = cursor1.element();
	        Monomio monomio2 = cursor2.element();

	        int exponente1 = monomio1.getExponente();
	        int exponente2 = monomio2.getExponente();
	        int coeficiente1 = monomio1.getCoeficiente();
	        int coeficiente2 = monomio2.getCoeficiente();

	        if (exponente1 > exponente2) {
	            resultado.terms.addLast(new Monomio(coeficiente1, exponente1));
	            cursor1 = p1.terms.next(cursor1);
	        } else if (exponente1 < exponente2) {
	            resultado.terms.addLast(new Monomio(-coeficiente2, exponente2)); // Negar el coeficiente de p2
	            cursor2 = p2.terms.next(cursor2);
	        } else {
	            int nuevoCoeficiente = coeficiente1 - coeficiente2; // Restar coeficientes
	            if (nuevoCoeficiente != 0) {
	                resultado.terms.addLast(new Monomio(nuevoCoeficiente, exponente1));
	            }
	            cursor1 = p1.terms.next(cursor1);
	            cursor2 = p2.terms.next(cursor2);
	        }
	    }

	    while (cursor1 != null) {
	        Monomio monomio1 = cursor1.element();
	        resultado.terms.addLast(new Monomio(monomio1.getCoeficiente(), monomio1.getExponente()));
	        cursor1 = p1.terms.next(cursor1);
	    }

	    while (cursor2 != null) {
	        Monomio monomio2 = cursor2.element();
	        resultado.terms.addLast(new Monomio(-monomio2.getCoeficiente(), monomio2.getExponente())); // Negar el coeficiente de p2
	        cursor2 = p2.terms.next(cursor2);
	    }

	    return resultado;
	}

    
  /**
   * Calcula el producto de dos polinomios.
   * @param p1 primer polinomio.
   * @param p2 segundo polinomio.
   * @return el producto de los polinomios.
   */
  public static Polinomio multiplica(Polinomio p1, Polinomio p2) {
	    Polinomio multiplicacionFinal = new Polinomio();
	    Position<Monomio> cursor1 = p1.terms.first();
	    while (cursor1 != null) {
	        Monomio monomio = cursor1.element();
	        Polinomio multiplicado = multiplica(monomio, p2);
	        multiplicacionFinal = suma(multiplicacionFinal, multiplicado);
	        cursor1 = p1.terms.next(cursor1);
	    }
	    return multiplicacionFinal;
	}

  /**
   * Calcula el producto de un monomio y un polinomio.
   * @param m el monomio
   * @param p el polinomio
   * @return el producto del monomio y el polinomio
   */
  public static Polinomio multiplica(Monomio m, Polinomio p) {
	  Polinomio multiplicacionFinal = new Polinomio();
	  Position<Monomio> cursor = p.terms.first();  
	  while(cursor!=null) {
		  Monomio monomio1= cursor.element();
		  int nuevoCoeficiente = monomio1.getCoeficiente()* m.getCoeficiente();
		  int nuevoExponente= monomio1.getExponente() + m.getExponente();
		  multiplicacionFinal.terms.addLast(new Monomio(nuevoCoeficiente, nuevoExponente));
		  cursor=p.terms.next(cursor);
	  } 
    return multiplicacionFinal;
  }
    
  /**
   * Devuelve el valor del polinomio cuando su variable es sustiuida por un valor concreto.
   * @param valor el valor asignado a la variable del polinomio
   * @return el valor del polinomio para ese valor de la variable.
   */
  public long evaluar(int valor) {
	  int resultado=0;
	  Position<Monomio> cursor = terms.first();
	  while(cursor!=null) {
		  resultado = (int)((resultado + (Math.pow(valor,cursor.element().getExponente())) * cursor.element().getCoeficiente()));
		  cursor= terms.next(cursor);
	  }
    return resultado;
  }

  /**
   * Devuelve el exponente (grado) del monomio con el mayor grado
   * dentro del polinomio
   * Si el polinomio es vacio (la representacion del polinomio "0") entonces
   * el valor devuelto debe ser -1.
   * @return el grado del polinomio
   */
  public int grado() {
	  int gradoFinal=0;
    if(terms.isEmpty()) {
    	return -1;
    }
    else {
    	 Position<Monomio> cursor = terms.first();
    	 return cursor.element().getExponente();
    }
  }
  
  public boolean equals(Object obj) {
	    if (this == obj) return true;
	   // if (!(obj instanceof Polinomio)) return false;
	    if (obj instanceof Polinomio) {
	    Polinomio otherPolinomio = (Polinomio) obj;
	    return this.terms.equals(otherPolinomio.terms);
	    }
	    else return false;
  }
  




  @Override
  public String toString() {
    if (terms.isEmpty()) return "0";
    else {
      StringBuffer buf = new StringBuffer();
      Position<Monomio> cursor = terms.first();
      while (cursor != null) {
        Monomio p = cursor.element();
        int coef = p.getCoeficiente();
        int exp = p.getExponente();
        buf.append(new Integer(coef).toString());
        if (exp > 0) {
          buf.append("x");
          buf.append("^");
          buf.append(new Integer(exp)).toString();
        }
        cursor = terms.next(cursor);
        if (cursor != null) buf.append(" + ");
      }
      return buf.toString();
    }
  }
}
