Ensamblador:

./88110e -e COMPRIME1 -o CDV24.bin CDV24.ens
./mc88110.bat CDV24.bin

Comprime:  
    CPILA() ;creas marco de pila
    subu r30, r30, 36 ;creas espacio variables locales

PASO1:   ;Hallar long de la cadena
    ld r10, r31, 8 ;cargas la cadena
    PUSH(r10)
    bsr LongCad  ; hallas long de la cadena
    POP(r10)
    st r29, r31, -4 ;guardas long en -4

PASO2:  ;Ajustar long a exceso 4 
    divu r11, r29, 4
    mulu r12, r11, 4
    cmp r7, r12, r29
    bb1 eq, r7, PASO3
    addu r11, r11, 1
    mulu r12, r11, 4

PASO3:  ;Inicializar variables
    subu r30, r30, r12
    ld r10, r31, 8
    or r2, r0, 8
    or r3, r0, 0
    or r4, r0, 0
    or r5, r0, 128
    or r6, r0, 5
    or r17, r0, 8
    or r8, r0, 5

PASO4:   ;Copiar 8 primero caracteres
    ld.bu r20, r10, r3
    st.b r20, r30, r4
    addu r3, r3, 1
    addu r4, r4, 1
    DBNZ(r2, PASO4)
;ActualizarValores
    st r3, r31, -8
    st r4, r31, -12
    st r5, r31, -16
    st r6, r31, -20
    st r0, r31, -24
    st r17, r31, -28
    st r8, r31, -32
    st r0, r31, -36

PASO5:  ;Recorre el bucle texto hasta el final
    ld.bu r11, r10, r3
    cmp r7, r11, 0
    bb1 eq, r7, CopiaFin ;Mirar si ya es el final
    ld r12, r31, -24 ;cargar dir jj
    PUSH(r12)
    PUSH(r3)
    PUSH(r10)
    bsr BuscaMax ;localiza siguiente subcadena repetida mas grande
    or r2,r0,0
    POP(r10)
    POP(r3)
    POP(r12)
	;Recuperar VL
    ld r10, r31, 8
    ld r3, r31, -8
    ld r4, r31, -12
    ld r5, r31, -16
    ld r6, r31, -20
    ld r12, r31, -24
    ld r17, r31, -28
    ld r8, r31, -32
    ld r9, r31, -36
    cmp r7, r29, 4 ; Miras si la longitud L de la subcadena devuelta por BuscaMax es < 4
    bb1 lt, r7, Copiar

Comprimir:  ;Cuando es mayor que 4 
    ld r12, r31, -24
    ld r21, r12, 0 ;cargas jj
    extu r22, r21, 8 <0> ; cargas en r22 los 8 primeros bits sin desplazamiento
    st.b r22, r30, r4
    addu r4, r4, 1 ;aumentar puntero VL
    extu r22, r21, 8 <8> ;cargas en r22 los 8 primeros bits con desplazamiento 8
    st.b r22, r30, r4 
    addu r4, r4, 1
    st.b r29, r30, r4 ;guardas longitud subcadena comprimida
    addu r4, r4, 1
    st r4, r31, -12 ;actualizas puntero VL
    addu r3, r3, r29 ;actualizas valor puntero de texto + long subcadena comprimida
    st r3, r31, -8  
    addu r9, r9, r5 ; Se suma al byte el valor 2^x para cambiar el 1 a la posicion x
    st r9, r31, -36; actualizas valor
    divu r5, r5, 2 ;2^7 -> 2^6 -> .... cambias pos del 1
    st r5, r31, -16
    subu r17, r17, 1 ;disminuir cont bits
    st r17, r31, -28
    cmp r7, r17, r0 ;miras si contador bits es 0 para saber si avanzar sig byte
    bb1 eq, r7, NextByte
    br PASO5

Copiar: ;Cuando es menor que 4     
    ld.bu r11, r10, r3
    st.b r11, r30, r4
    addu r3, r3, 1
    addu r4, r4, 1
    st r3, r31, -8
    st r4, r31, -12
    divu r5, r5, 2
    st r5, r31, -16
    subu r17, r17, 1
    st r17, r31, -28
    cmp r7, r17, 0
    bb1 eq, r7, NextByte
    br PASO5

NextByte:    
    ld r16, r31, 12
    st.b r9, r16, r8
    addu r8, r8, 1
    st r8, r31, -32
    addu r6, r6, 1
    st r6, r31, -20 
    or r5, r0, 128
    st r5, r31, -16
    or r17, r0, 8
    st r17, r31, -28
    st r0, r31, -36
    br PASO5

CopiaFin:   
    cmp r7, r17, 8
    bb1 ne, r7, NextByte
    ld r16, r31, 12
    ld r8, r31, -32
    or r28, r0, 0
    ld r4, r31, -12

BucleFinal:  
    ld.bu r11, r30, r28
    st.b r11, r16, r8
    addu r8, r8, 1
    addu r28, r28, 1
    cmp r7, r28, r4
    bb1 eq, r7, Cabecera
    br BucleFinal

Cabecera:   
    ld r26, r31, -4
    extu r22, r26, 8 <0>
    st.b r22, r16, 0
    extu r22, r26, 8 <8>
    st.b r22, r16, 1
    or r28, r0, 1
    st.b r28, r16, 2
    ld r6, r31, -20
    extu r22, r6, 8 <0>
    st.b r22, r16, 3
    extu r22, r6, 8 <8>
    st.b r22, r16, 4

PASO11:   
    or r29, r0, r8
    DPILA()
    jmp (r1)

88110e  -e P_ent -o ej.bin ej.ens (se compila, ensambla archivo)
-e 0 indica la posición de memoria que empieza el programa
-0 fichero de salida, siempre.bin y fichero fuente que estas ejecutando 
UN EJEMPLO SERÍA: 88110e -e 0 -o ejemplo1.bin ejemplo1.ens

ej.bin: (creo que compila )
	- contiene la traduccion a lenguaje máquina(del 88110) de las instrucciones
	- Definicion de los datos incluido en el programa
	- Contiene la tabla de símbolos(conjunto de etiquetas del programa junto con sus direcciones)
	- Contiene punto de entrada: Direccion de comienzo de la ejecución
mc88110.bat: (ejecuta el programa)
	-Se ejecuta de esta manera: mc88110.bat ejemplo1.bin (tambien sin poner.bat parece ser)
		Al ejecutar reconoce la operación add por ejemplo, y muestra en Tot. Inst las iteraciones hechas
		¡¡ Ciclo : 1 indica que se va a realizar el primer ciclo
		Tambien mjuestra el contenido de las memoria desde 01 hasta 31
		Y te enseña los flancos, nos importa FC(flanco de acarreo) y FV (flanco de overflow
		(88110> h (te enseña los comandos) algunos ejemplos:
		
			r 2 0x10203040 modifica registro de r2, pasara de ser 0 a 10203040,
				siempre para cambiar poner 0xnº al que quieres caambiar
			r 3 10203040 te lo modifica en hexadecimal
			
			v 0 ver contenido de la memoria 
				te saldra: 0   F4427003    FFFFFFFF  00000000  00000000
						   16  00000000    00000000  00000000  00000000
						   32  00000000    00000000  00000000  00000000
						   48  00000000    00000000  00000000  00000000
						   64  00000000    00000000  00000000  00000000
			i 1000 0x1020340 : te modifica el valor del registro 1000		
			
			d 1000: desemsamblar direccion 1000, te enseña las instrucciones qie hay en memoria 1000
			
			e : ejecuta donde apunta el puntero(ejecuta todo el programa)
			Una vez el puntero va avanzando, no puedes ir atras a ejecutar el programa, debes salir(q)
			y volver a ejecutar el programa (mc88110.bat ejemplo1.bin)
			
			Con t a diferencia de e ejecutas solo una parte del programa, es decir al hacer t no va a hacer todos los
			contadores hasta que termine el programa, va a hacer la instruccion, suma el contador y para
			USO T: ir usando t 1, vas viendo en que instruccion esta tu error(por ejemplo inst.48), la siguiente vez que compiles haces t 48 y ya sigues desde ahi
			
			p Comando para punto de ruptura, si llega a ese punto(esa instruccion) para el programa y nos devuelve
			el control. Util para ejecutar solo 1 subrutina
			Se añade de la manera p + SUMA (corre el programa hasta que llega a subrutina SUMA donde para
			/ p - SUMA (para quitarlo)
			
Ctrl + c --> detienes ejecución del programa
Para ejecutar en ensamblador, debes decirle por que linea empezar ejemplo:
	SUMA:       add    r2, r2, r3    ; r2 <-- r2 + r3
            jmp    (r1)

	; Llamante
	;
	LLAM:       add    r2, r0, 10  ; r2 <-- 10 (dato en decimal)
            add    r3, r0, -7  ; r3 <-- -7
            bsr    SUMA        ; Llamada a subrutina ( ¿ no hay pila ?) hara bs -4(4 instrucciones hasta suma) 
            stop               ; 'instrucción' del emulador 
	PARA ESTE PROGRAMA ejecutar: 
		G:\ProyectoEstructura\88k_EjemplosPR>88110e -e 8/LLAM -o ejemplo2.bin ejemplo2.ens
		



; CoincidenCad: ld r20,r30,0
			  ; ld r21,r30,4
			  ; and r2,r0,0 ;ContAux, cuenta la long de la cadena actual
			  ; and r29,r0,0 ;ContTot contador maximo coincidente
			  ; and r4,r0,0 ; puntero para recorrer las cadenas
; BUCLECOINC:
			; ld.bu r5,r20,r4
			; ld.bu r6,r20,r4
			; cmp r9,r5,0
			; bb1 eq, r9, FIN2
			; cmp r10,r6,0
			; bb1 eq, r10, FIN2
			; cmp r7, r5, r6 
			; addu r4,r4,1
			; bb1 eq, r7,EQCONTAUX 
			; bb0 eq,r7,NEQCONTAUX 
			
; EQCONTAUX	: addu r2,r2,1
			; br BUCLECOINC
; NEQCONTAUX	:cmp r8,r29,r2
			; bb1 gt, r8,br 1
			; or r29,r2,0
			; and r2,r0,0
			; br BUCLECOINC		
; FIN2: jmp(r1)
			